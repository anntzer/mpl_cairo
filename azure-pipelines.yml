# Notes:
# The macOS build does not install inkscape as building it from source is a bit
# silly.

strategy:
  matrix:
    Linux_py36:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.6'
    Linux_py37:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.7'
    Linux_py38:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.8'
    macOS_py36:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.6'
    macOS_py37:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.7'
    macOS_py38:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.8'
    Windows_py36:
      vmImage: 'windows-2019'
      pythonVersion: '3.6'
    Windows_py37:
      vmImage: 'windows-2019'
      pythonVersion: '3.7'
    Windows_py38:
      vmImage: 'windows-2019'
      pythonVersion: '3.8'

pool:
  vmImage: '$(vmImage)'

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(pythonVersion)'
    architecture: 'x64'

- bash: |
    set -x

    pip install --upgrade pip setuptools &&

    case "$(python -c 'import sys; print(sys.platform)')" in
    linux)
      sudo PY_VERS="$PYTHONVERSION" tools/build-manylinux-wheel.sh &&
      sudo apt update &&
      sudo apt install ghostscript inkscape
      ;;
    darwin)
      # python2 unlinking needed until brew sorts that out.
      # gs<9.50 is needed until matplotlib#15556 (matplotlib<3.2.0rc2).
      brew update >/dev/null &&
      brew unlink python@2 &&
      brew install cairo pkg-config &&
      PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig tools/build-macos-wheel.sh &&
      brew install https://raw.githubusercontent.com/sashkab/homebrew-core/996730866806cf0dd13a56beac47c664b1408d94/Formula/ghostscript.rb
      ;;
    win32)
      git clone --depth 1 https://github.com/anntzer/cairocffi-windows-wheels &&
      python -mpip install --find-links cairocffi-windows-wheels --prefer-binary cairocffi &&
      python tools/build-windows-wheel.py &&
      choco install --no-progress ghostscript inkscape
      ;;
    *)
      exit 1
      ;;
    esac &&

    python -mpip install dist/*.whl &&
    # matplotlib 3.2.0rc1 needed for tests to pass on Py3.8.
    pip install matplotlib==3.2.0rc1 &&
    python tools/ensure-mpl-test-data.py &&
    # pytest-{instafail,timeout} useful for hanging tests.
    pip install pytest pytest-instafail pytest-timeout

  displayName: 'Build & install'

- bash: |
    export PYTHONFAULTHANDLER=1 &&
    ./run-mpl-test-suite.py --tolerance=50 \
      --instafail --timeout=300 --junitxml=junit/test-results.xml &&
    PYTHONIOENCODING=utf-8 ./run-examples.py
  displayName: 'Test'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-results.xml'
    testRunTitle: 'Python $(pythonVersion) / $(vmImage)'
  condition: succeededOrFailed()

- bash: |
    cp dist/*.whl "$BUILD_ARTIFACTSTAGINGDIRECTORY"
  displayName: 'Copy files'

- task: PublishBuildArtifacts@1
  inputs:
    artifactName: 'wheels'

- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: 'wheels'
